@using MadBidFetcher
@using MadBidFetcher.Model
@using Auction = MadBidFetcher.Auction
@model AuctionModel

@{
    ViewBag.Title = Model.Auction.Title;
    var auctionTime = Model.Auction.Status == AuctionStatus.Closed ? 0 : Math.Ceiling(Model.Auction.BidTimeOut / 2.0) * 1000;
    var startDate = Model.Auction.GetStartDate();
}
<link href="@Url.Content("~/Content/Auction.css")" rel="stylesheet" />

@section scripts
{
    <script src="~/Scripts/Highcharts/highcharts.js"></script>
    <script src="~/Scripts/Highcharts/modules/exporting.js"></script>

    <script type="text/javascript">
        $(function () {
            var options = {
                chart: {
                    zoomType: 'x',
                    spacingRight: 20
                },
                title: {
                    text: 'Players'
                },
                xAxis: {
                    type: 'datetime',
                    maxZoom:@(Model.Auction.TimingsInterval * 10 * 60000),
                    title: {
                        text: null
                    }
                },
                yAxis: {
                    title: {
                        text: null
                    }
                },
                tooltip: {
                    shared: true
                },
                legend: {
                    enabled: false
                },
                plotOptions: {
                    area: {
                        fillColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, Highcharts.getOptions().colors[0]],
                                [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                            ]
                        },
                        lineWidth: 1,
                        marker: {
                            enabled: false
                        },
                        shadow: false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        threshold: null
                    }
                }
            };
            $('#chartContainerPlayers').highcharts($.extend(options,{
                series: [{
                    type: 'area',
                    name: 'Players',
                    pointInterval:@(Model.Auction.TimingsInterval * 60000),
                    pointStart: Date.UTC(@startDate.Value.Year, @startDate.Value.Month-1, @startDate.Value.Day, @startDate.Value.Hour,@startDate.Value.Minute),
                    data: [@string.Join(",", Model.Auction.Timings.Select(t => t.Players == -1 ? "null" : t.Players.ToString()).ToArray())]
                }]}));
            $('#chartContainerBids').highcharts($.extend(options,{
                title: {
                    text: 'Bids'
                },
                series: [{
                    type: 'area',
                    name: 'Bids',
                    pointInterval: @(Model.Auction.TimingsInterval * 60000),
                    pointStart: Date.UTC(@startDate.Value.Year, @startDate.Value.Month-1, @startDate.Value.Day, @startDate.Value.Hour,@startDate.Value.Minute),
                    data: [@string.Join(",", Model.Auction.Timings.Select(t => t.Count == -1 ? "null" : t.Count.ToString()).ToArray())]
                }]}));
        });
    </script>
}

@if (auctionTime > 0)
{
    <script type="text/javascript">
        window.setInterval(function() { window.location.reload(); }, @(auctionTime > 10000 ? 10000 : auctionTime));
    </script>
}
<div>
    @Html.ActionLink("Back", "Index")
</div>
<table class="auctionDetails">
    <tr>
        <td class="auctionCompact">
            @Html.Partial("ShowCompact", Model.Auction)
        </td>
        <td>
            <div class="playersWrapper">
                @foreach (var p in Model.Auction.ActivePlayers)
                {
                    <div class="players">
                        <p>Last @p.Key bids (@p.Value.Count)</p>
                        <table>
                            @foreach (var player in p.Value.OrderByDescending(b => b.Bids.Count).ThenByDescending(b => b.Bids.Max(b1 => b1.Value)))
                            {
                                <tr>
                                    <td>
                                        <b>@Html.DisplayFor(m => player.Player)</b>
                                    </td>
                                    <td class="bids">
                                        @if (p.Key == Auction.ActivaPlayersTimes[0])
                                        {
                                            var player1 = player;
                                            var playerAllBids = Model.Auction.ActivePlayers
                                                .Skip(1)
                                                .Select(ap =>
                                                            {
                                                                var resultPlayer = ap.Value.FirstOrDefault(pb => pb.Player.Name == player1.Player.Name);
                                                                return resultPlayer == null ? 0 : resultPlayer.Bids.Count;
                                                            })
                                                            .ToArray();
                                            @(string.Format("{0} ({1}, {2})", player.Bids.Count, string.Join(", ", playerAllBids), Model.Auction.Bids.Count(b=>b.PlayerName==player.Player.Name)))
                                        }
                                        else
                                        {
                                            @player.Bids.Count
                                        }
                                    </td>
                                    <td class="bids">
                                        @(p.Key == Auction.ActivaPlayersTimes[0]
                                              ? player.Bids.OrderByDescending(b => b.Value).Select(b => b.Value.ToString("C")).FirstOrDefault()
                                              : string.Join(", ", player.Bids.OrderByDescending(b => b.Value).Take(5).Select(b => b.Value.ToString("C")).ToArray()))
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                }
            </div>
            <div class="playersWrapper allPlayers">
                <table>
                    @foreach (var p in Model.Auction.Players.OrderByDescending(pl => pl.Bids.Count))
                    {
                        var last = p.Bids.LastOrDefault();
                        <tr>
                            <td class="@(p.Name == SessionStore.CurrentUser ? "current" : "")">@Html.DisplayFor(m => p)</td>
                            <td>@p.Bids.Count</td>
                            @if (last != null)
                            {
                                <td class="bids">@last.Value.ToString("C") (@last.Time)</td>
                            }
                            else
                            {
                                <td></td>
                            }
                        </tr>
                    }
                </table>
            </div>
            <div class="playersWrapper allPlayers chart" id="chartContainerPlayers">
            </div>
            <div class="playersWrapper allPlayers chart" id="chartContainerBids">
            </div>
        </td>
    </tr>
</table>
